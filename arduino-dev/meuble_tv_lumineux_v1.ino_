#include <Arduino.h>
#include <FastLED.h>

#define NUM_LEDS    92 // Nombre de LEDS
#define LED_TYPE    APA102
#define COLOR_ORDER BGR // Mes APA102 sont BGR et pas RGB
CRGB leds1[NUM_LEDS];
CRGB leds2[NUM_LEDS];
CRGB leds3[NUM_LEDS];
CRGB leds4[NUM_LEDS];

// ARDUINO MEGA: SPI: 51 (MOSI = DATA), 52 (SCK = CLOCK)
// ARDUINO UNO: SPI:  11 (MOSI = DATA), 13 (SCK = CLOCK)


#define DATA_PIN_1    12
#define CLK_PIN_1     13

#define DATA_PIN_2    10
#define CLK_PIN_2     11

#define DATA_PIN_3    8
#define CLK_PIN_3     9

#define DATA_PIN_4    6
#define CLK_PIN_4     7

#define BRIGHTNESSMAX 64

#define MAX_VERTICAL 15
#define MAX_HORIZONTAL 120


void setup() {
  FastLED.addLeds<APA102, DATA_PIN_1, CLK_PIN_1, COLOR_ORDER>(leds1, NUM_LEDS);
  FastLED.addLeds<APA102, DATA_PIN_2, CLK_PIN_2, COLOR_ORDER>(leds2, NUM_LEDS);
  FastLED.addLeds<APA102, DATA_PIN_3, CLK_PIN_3, COLOR_ORDER>(leds3, NUM_LEDS);
  FastLED.addLeds<APA102, DATA_PIN_4, CLK_PIN_4, COLOR_ORDER>(leds4, NUM_LEDS);
  FastLED.setBrightness(BRIGHTNESSMAX);

  //BAS   3-32
  //COTE1 33-48
  //HAUT  49-78
  //COTE2 0-2 79-91

  //RED
  FastLED.clear(true);
  setColor(1,CRGB::Red);
  setColor(2,CRGB::Red);
  setColor(3,CRGB::Red);
  setColor(4,CRGB::Red);
  FastLED.show();
  delay(2000);
  FastLED.clear(true);
  setColor(1,CRGB::Green);
  setColor(2,CRGB::Green);
  setColor(3,CRGB::Green);
  setColor(4,CRGB::Green);
  FastLED.show();
  delay(2000);
  FastLED.clear(true);
  setColor(1,CRGB::Blue);
  setColor(2,CRGB::Blue);
  setColor(3,CRGB::Blue);
  setColor(4,CRGB::Blue);
  FastLED.show();
  delay(2000);
  FastLED.clear(true);
  setColor(1,CRGB::White);
  setColor(2,CRGB::White);
  setColor(3,CRGB::White);
  setColor(4,CRGB::White);
  FastLED.show();
  delay(2000);

  //Clignottement
  FastLED.clear(true);
  for (int k = 0; k < 15; k++) {
        FastLED.clear(true);
        for (int i = 0; i <= MAX_HORIZONTAL; i+=2) {
            setTop(i,CRGB::White);
            setBottom(i,CRGB::White);
        }
        for (int i = 0; i <= MAX_VERTICAL; i+=2) {
          setMiddle(0, i, CRGB::White);
          setMiddle(3, i, CRGB::White);
          setMiddle(4, i, CRGB::White);
          setMiddle(7, i, CRGB::White);
        }
        FastLED.show();
        delay(50);
        FastLED.clear(true);
        for (int i = 1; i <= MAX_HORIZONTAL; i+=2) {
            setTop(i,CRGB::White);
            setBottom(i,CRGB::White);
        }
        for (int i = 1; i <= MAX_VERTICAL; i+=2) {
          setMiddle(0, i, CRGB::White);
          setMiddle(3, i, CRGB::White);
          setMiddle(4, i, CRGB::White);
          setMiddle(7, i, CRGB::White);
        }
        FastLED.show();
        delay(50);
  }
  
  //random
  FastLED.clear(true);
  for (int i=0; i < 3000; i++) {
    int val = random (120+120);
    if (val <= 120) {
      setTop(val,CHSV(random(255),random(255), random(255)));
     } else {
      val -= 120;
      setBottom(val,CHSV(random(255),random(255), random(255)));
    } 
    if (i%10==0) {
       FastLED.show();
    }
  }
  
  //Effacement
  for (int i = 0; i <= MAX_HORIZONTAL+5; i++) {
      setTop(i-5,CRGB::Black);
      setTop(i,CRGB::Red);
      FastLED.show();
      delay(5);
  }
  
  for (int i = MAX_HORIZONTAL; i >= -5; i--) {
    setBottom(i+5,CRGB::Black);
    setBottom(i,CRGB::Red);
    FastLED.show();
    delay(5);
  }
  FastLED.clear(true);
  
  for (int k=0; k<=255; k++) {
    for (int i = 0; i <= MAX_HORIZONTAL; i++) {
     setTop(i,CHSV(i,255,k));
     setBottom(i,CHSV(i,255,k));
     for (int j =0; j <= MAX_VERTICAL; j++) {
       setMiddle(i, j, CHSV(i,255,k));
     }
    }
    FastLED.show();
    delay(50);
  }
}

int cpt = 1;
int sens = 0;
void loop() {
  
  for (int i = 0; i <= MAX_HORIZONTAL; i++) {
   setTop(i,CHSV(i+cpt,255,255));
   setBottom(i,CHSV(i+cpt,255,255));
   for (int j =0; j <= MAX_VERTICAL; j++) {
     setMiddle(i, j, CHSV(i+cpt,255,255));
   }
  }
  FastLED.show();

  if (sens == 0) {
    cpt++;
  } else {
    cpt--;
  }
  
  if (cpt > 510) {
    sens = 1;
  } else if (cpt < 0) {
    sens = 0;
  }
  
  delay(100);

}

void setColor(int pos, CRGB color) {
  switch(pos) {
    case 1:
      for (int i=0; i < NUM_LEDS;i++) {
        leds1[i] = color;
      }
      break;
    case 2:
      for (int i=0; i < NUM_LEDS;i++) {
        leds2[i] = color;
      }
      break;
    case 3:
      for (int i=0; i < NUM_LEDS;i++) {
        leds3[i] = color;
      }
      break;
    case 4:
      for (int i=0; i < NUM_LEDS;i++) {
        leds4[i] = color;
      }
      break;
    default:
      break;
  }
}

void setTop(int i, CRGB color) {
  if (i>=0 && i<30) {
    leds1[78-i] = color;
  } else if (i<60) {
    leds2[49+i-30] = color;
  } else if (i<90) {
    leds3[49+i-60] = color;    
  } else if (i<120) {
    leds4[49+i-90] = color;
  }
}
void setBottom(int i, CRGB color) {
  if (i>=0 && i<30) {
    leds1[3+i] = color;
  } else if (i<60) {
    leds2[32-i+30] = color;
  } else if (i<90) {
    leds3[32-i+60] = color;    
  } else if (i<120) {
    leds4[32-i+90] = color;
  }
}
void setMiddle(int pos, int i, CRGB color) {
  //COTE1 33-48
  //COTE2 0-2 79-91

  switch (pos) {
    case 0:
      if (i<3) {
        leds1[0+i] = color;
      } else {
        leds1[91-i+3] = color;
      }
      break;
    case 30:
    case 1:
      leds1[33+i] = color;
      break;
    case 31:
    case 2:
      leds2[33+i] = color;
      break;
    case 60:
    case 3:
      if (i<3) {
        leds2[0+i] = color;
      } else {
        leds2[91-i+3] = color;
      }
      break;
    case 61:
    case 4:
      leds3[33+i] = color;
      break;
    case 90:
    case 5:
      if (i<3) {
        leds3[0+i] = color;
      } else {
        leds3[91-i+3] = color;
      }
      break;
    case 91:
    case 6:
      leds4[33+i] = color;
      break;
    case 120:
    case 7:
       if (i<3) {
        leds4[0+i] = color;
      } else {
        leds4[91-i+3] = color;
      }
      break;
    default:
      break;
  }
  
}
